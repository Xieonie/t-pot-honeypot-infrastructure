# Logstash Configuration for T-Pot Honeypot Infrastructure
# This configuration processes logs from various honeypot services and security tools

input {
  # Beats input for log forwarding
  beats {
    port => 5044
    host => "0.0.0.0"
  }
  
  # TCP input for syslog
  tcp {
    port => 5000
    codec => json
    type => "syslog"
  }
  
  # UDP input for syslog
  udp {
    port => 5001
    codec => json
    type => "syslog"
  }
  
  # File input for T-Pot logs
  file {
    path => "/data/tpot/logs/**/*.log"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    type => "tpot"
  }
  
  # File input for Cowrie SSH honeypot
  file {
    path => "/data/cowrie/log/cowrie.json*"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    type => "cowrie"
    codec => "json"
  }
  
  # File input for Dionaea malware honeypot
  file {
    path => "/data/dionaea/log/dionaea.json*"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    type => "dionaea"
    codec => "json"
  }
  
  # File input for Suricata IDS
  file {
    path => "/data/suricata/log/eve.json*"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    type => "suricata"
    codec => "json"
  }
  
  # File input for Elasticpot
  file {
    path => "/data/elasticpot/log/elasticpot.log*"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    type => "elasticpot"
  }
  
  # File input for system logs
  file {
    path => "/var/log/auth.log"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    type => "auth"
  }
  
  file {
    path => "/var/log/syslog"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    type => "system"
  }
}

filter {
  # Common timestamp parsing
  if [fields][log_type] {
    mutate {
      add_field => { "log_source" => "%{[fields][log_type]}" }
    }
  }
  
  # Process Cowrie SSH honeypot logs
  if [type] == "cowrie" {
    # Parse timestamp
    date {
      match => [ "timestamp", "ISO8601" ]
      target => "@timestamp"
    }
    
    # Add GeoIP information
    if [src_ip] {
      geoip {
        source => "src_ip"
        target => "geoip"
        add_field => [ "country", "%{[geoip][country_name]}" ]
        add_field => [ "city", "%{[geoip][city_name]}" ]
        add_field => [ "coordinates", "%{[geoip][latitude]},%{[geoip][longitude]}" ]
      }
    }
    
    # Classify event types
    if [eventid] == "cowrie.login.success" {
      mutate {
        add_field => { "event_category" => "authentication" }
        add_field => { "event_type" => "successful_login" }
        add_field => { "severity" => "high" }
      }
    } else if [eventid] == "cowrie.login.failed" {
      mutate {
        add_field => { "event_category" => "authentication" }
        add_field => { "event_type" => "failed_login" }
        add_field => { "severity" => "medium" }
      }
    } else if [eventid] == "cowrie.command.input" {
      mutate {
        add_field => { "event_category" => "command_execution" }
        add_field => { "event_type" => "command_input" }
        add_field => { "severity" => "medium" }
      }
      
      # Detect suspicious commands
      if [input] =~ /wget|curl|nc|netcat|rm -rf|dd if=/ {
        mutate {
          add_field => { "suspicious_command" => "true" }
          replace => { "severity" => "high" }
        }
      }
    } else if [eventid] == "cowrie.session.file_download" {
      mutate {
        add_field => { "event_category" => "file_transfer" }
        add_field => { "event_type" => "file_download" }
        add_field => { "severity" => "high" }
      }
    }
    
    # Add honeypot identifier
    mutate {
      add_field => { "honeypot_type" => "cowrie" }
      add_field => { "honeypot_service" => "ssh" }
    }
  }
  
  # Process Dionaea malware honeypot logs
  if [type] == "dionaea" {
    date {
      match => [ "timestamp", "ISO8601" ]
      target => "@timestamp"
    }
    
    if [src_ip] {
      geoip {
        source => "src_ip"
        target => "geoip"
        add_field => [ "country", "%{[geoip][country_name]}" ]
      }
    }
    
    # Classify Dionaea events
    if [eventid] == "dionaea.connection.tcp.accept" {
      mutate {
        add_field => { "event_category" => "network" }
        add_field => { "event_type" => "connection_accept" }
        add_field => { "severity" => "low" }
      }
    } else if [eventid] == "dionaea.download.complete" {
      mutate {
        add_field => { "event_category" => "malware" }
        add_field => { "event_type" => "malware_download" }
        add_field => { "severity" => "critical" }
      }
    } else if [eventid] == "dionaea.shellcode.profile" {
      mutate {
        add_field => { "event_category" => "exploit" }
        add_field => { "event_type" => "shellcode_detected" }
        add_field => { "severity" => "high" }
      }
    }
    
    mutate {
      add_field => { "honeypot_type" => "dionaea" }
      add_field => { "honeypot_service" => "multi" }
    }
  }
  
  # Process Suricata IDS logs
  if [type] == "suricata" {
    date {
      match => [ "timestamp", "ISO8601" ]
      target => "@timestamp"
    }
    
    if [src_ip] {
      geoip {
        source => "src_ip"
        target => "geoip"
        add_field => [ "country", "%{[geoip][country_name]}" ]
      }
    }
    
    # Classify Suricata events
    if [event_type] == "alert" {
      mutate {
        add_field => { "event_category" => "ids_alert" }
        add_field => { "severity" => "high" }
      }
      
      # Classify by signature
      if [alert][signature] =~ /ET MALWARE/ {
        mutate {
          add_field => { "threat_type" => "malware" }
          replace => { "severity" => "critical" }
        }
      } else if [alert][signature] =~ /ET TROJAN/ {
        mutate {
          add_field => { "threat_type" => "trojan" }
          replace => { "severity" => "critical" }
        }
      } else if [alert][signature] =~ /ET SCAN/ {
        mutate {
          add_field => { "threat_type" => "scan" }
          replace => { "severity" => "medium" }
        }
      }
    } else if [event_type] == "flow" {
      mutate {
        add_field => { "event_category" => "network_flow" }
        add_field => { "severity" => "low" }
      }
    }
    
    mutate {
      add_field => { "honeypot_type" => "suricata" }
      add_field => { "honeypot_service" => "ids" }
    }
  }
  
  # Process Elasticpot logs
  if [type] == "elasticpot" {
    grok {
      match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:level} %{GREEDYDATA:log_message}" }
    }
    
    date {
      match => [ "timestamp", "ISO8601" ]
      target => "@timestamp"
    }
    
    # Extract IP from log message
    grok {
      match => { "log_message" => ".*from %{IP:src_ip}.*" }
      tag_on_failure => ["_grokparsefailure_elasticpot_ip"]
    }
    
    if [src_ip] {
      geoip {
        source => "src_ip"
        target => "geoip"
        add_field => [ "country", "%{[geoip][country_name]}" ]
      }
    }
    
    mutate {
      add_field => { "event_category" => "elasticsearch_honeypot" }
      add_field => { "event_type" => "elasticsearch_query" }
      add_field => { "severity" => "medium" }
      add_field => { "honeypot_type" => "elasticpot" }
      add_field => { "honeypot_service" => "elasticsearch" }
    }
  }
  
  # Process system authentication logs
  if [type] == "auth" {
    grok {
      match => { 
        "message" => "%{SYSLOGTIMESTAMP:timestamp} %{HOSTNAME:hostname} %{WORD:program}(?:\[%{POSINT:pid}\])?: %{GREEDYDATA:log_message}" 
      }
    }
    
    date {
      match => [ "timestamp", "MMM dd HH:mm:ss", "MMM  d HH:mm:ss" ]
      target => "@timestamp"
    }
    
    # Parse SSH authentication events
    if [program] == "sshd" {
      if [log_message] =~ /Failed password/ {
        grok {
          match => { "log_message" => "Failed password for %{USERNAME:username} from %{IP:src_ip}" }
        }
        mutate {
          add_field => { "event_category" => "authentication" }
          add_field => { "event_type" => "ssh_failed_login" }
          add_field => { "severity" => "medium" }
        }
      } else if [log_message] =~ /Accepted password/ {
        grok {
          match => { "log_message" => "Accepted password for %{USERNAME:username} from %{IP:src_ip}" }
        }
        mutate {
          add_field => { "event_category" => "authentication" }
          add_field => { "event_type" => "ssh_successful_login" }
          add_field => { "severity" => "high" }
        }
      }
      
      if [src_ip] {
        geoip {
          source => "src_ip"
          target => "geoip"
          add_field => [ "country", "%{[geoip][country_name]}" ]
        }
      }
    }
  }
  
  # Common enrichment for all events
  if [src_ip] {
    # Add threat intelligence
    translate {
      field => "src_ip"
      destination => "threat_level"
      dictionary_path => "/etc/logstash/threat_intel.yml"
      fallback => "unknown"
    }
    
    # Check against known malicious IPs
    if [src_ip] in ["1.2.3.4", "5.6.7.8"] {
      mutate {
        add_field => { "known_malicious" => "true" }
        replace => { "threat_level" => "high" }
      }
    }
  }
  
  # Add infrastructure metadata
  mutate {
    add_field => { "infrastructure" => "tpot" }
    add_field => { "environment" => "production" }
    add_field => { "processed_timestamp" => "%{@timestamp}" }
  }
  
  # Remove unnecessary fields
  mutate {
    remove_field => [ "host", "agent", "ecs", "log", "input" ]
  }
  
  # Convert numeric fields
  if [src_port] {
    mutate {
      convert => { "src_port" => "integer" }
    }
  }
  
  if [dst_port] {
    mutate {
      convert => { "dst_port" => "integer" }
    }
  }
}

output {
  # Output to Elasticsearch
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "tpot-logs-%{+YYYY.MM.dd}"
    template_name => "tpot"
    template_pattern => "tpot-*"
    template => "/etc/logstash/templates/tpot-template.json"
    template_overwrite => true
  }
  
  # Output critical events to separate index
  if [severity] == "critical" {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "tpot-critical-%{+YYYY.MM.dd}"
    }
  }
  
  # Output to file for debugging (optional)
  if [type] == "cowrie" {
    file {
      path => "/var/log/logstash/cowrie-processed.log"
      codec => json_lines
    }
  }
  
  # Output to stdout for debugging (remove in production)
  # stdout {
  #   codec => rubydebug
  # }
  
  # Send alerts to external systems
  if [severity] == "critical" {
    http {
      url => "http://alertmanager:9093/api/v1/alerts"
      http_method => "post"
      format => "json"
      mapping => {
        "alerts" => [
          {
            "labels" => {
              "alertname" => "CriticalSecurityEvent"
              "severity" => "%{severity}"
              "source" => "%{honeypot_type}"
              "src_ip" => "%{src_ip}"
            }
            "annotations" => {
              "summary" => "Critical security event detected"
              "description" => "%{message}"
            }
          }
        ]
      }
    }
  }
  
  # Send to syslog for backup
  syslog {
    host => "192.168.1.50"
    port => 514
    facility => "local0"
    severity => "info"
    message => "%{message}"
  }
}